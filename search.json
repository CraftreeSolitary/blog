[
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/httpx-0.28.0.dist-info/licenses/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/httpx-0.28.0.dist-info/licenses/LICENSE.html",
    "title": "<strong>Devansh</strong> Lodha",
    "section": "",
    "text": "Copyright © 2019, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/pyzmq-26.2.0.dist-info/licenses/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/pyzmq-26.2.0.dist-info/licenses/LICENSE.html",
    "title": "<strong>Devansh</strong> Lodha",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2009-2012, Brian Granger, Min Ragan-Kelley\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/soupsieve-2.6.dist-info/licenses/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/soupsieve-2.6.dist-info/licenses/LICENSE.html",
    "title": "<strong>Devansh</strong> Lodha",
    "section": "",
    "text": "MIT License\nCopyright (c) 2018 - 2024 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "devansh’s blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nOtsu’s Threshold Algorithm\n\n\n\n\n\n\ncode\n\n\nprobability theory\n\n\ncomputer vision\n\n\n\nWe’ll binarize images of Tom and Jerry, Pink Panther and some book pages. Then, we’ll challenge Otsu’s method with noisy inputs.\n\n\n\n\n\nDec 2, 2024\n\n\nDevansh Lodha\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/otsu_thresholding/otsu_thresholding.html",
    "href": "posts/otsu_thresholding/otsu_thresholding.html",
    "title": "Otsu’s Threshold Algorithm",
    "section": "",
    "text": "The Otsu method is used to find the threshold value for a grayscale image. The threshold value is used to separate the image into two parts: the background and the foreground. The Otsu method is based on the assumption that the image has two classes of pixels: the background and the foreground. The method calculates the threshold value that minimizes the intra-class variance and maximizes the inter-class variance. The threshold value is used to separate the image into two parts: the background and the foreground. The Otsu method is widely used in image processing and computer vision applications.\nCode\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nCode\nbookpage_1 = cv2.imread(\"bookpage_1.jpeg\",0)\nbookpage_2 = cv2.imread(\"bookpage_2.jpeg\",0)\npanther = cv2.imread(\"panther.jpeg\",0)\ntom = cv2.imread(\"tom.jpeg\",0)"
  },
  {
    "objectID": "posts/otsu_thresholding/otsu_thresholding.html#creating-the-histogram-of-an-image",
    "href": "posts/otsu_thresholding/otsu_thresholding.html#creating-the-histogram-of-an-image",
    "title": "Otsu’s Threshold Algorithm",
    "section": "Creating the Histogram of an Image",
    "text": "Creating the Histogram of an Image\nWe have a discrete grayscale image \\(\\{x\\}\\) with \\(n_i\\) as the number of occurences of gray level \\(i\\). The probability of occurence of a pixel of level \\(i\\) in the image is \\[p_x(i)=p(x=i)=\\frac{n_i}{n}, \\qquad 0\\leq i &lt; L\\] where \\(L\\) is the total number of grey levels in the image (here \\(L=256\\)), \\(n\\) is the total number of pixels in the image, and \\(p_x(i)\\) is the image’s histogram for pixel value \\(i\\) normalized to \\([0,1]\\)\n\n\nCode\ndef imgToHist(img):\n  hist_data = np.zeros((256))\n  # counting number of pixels with a particular value between 0-255\n  for x_pixel in range(img.shape[0]):\n          for y_pixel in range(img.shape[1]):\n              pixel_value = int(img[x_pixel, y_pixel])\n              hist_data[pixel_value] += 1\n\n  # normalizing\n  hist_data/=(img.shape[0]*img.shape[1])\n\n  # returning the hist\n  return hist_data"
  },
  {
    "objectID": "posts/otsu_thresholding/otsu_thresholding.html#implementing-otsus-algorithm",
    "href": "posts/otsu_thresholding/otsu_thresholding.html#implementing-otsus-algorithm",
    "title": "Otsu’s Threshold Algorithm",
    "section": "Implementing Otsu’s Algorithm",
    "text": "Implementing Otsu’s Algorithm\nThe algorithm exhaustively searches for the threshold that minimizes the intra-class variance, defined as a weighted sum of variances of the two classes: \\[\\sigma_w^2 (t) = w_0(t)\\sigma_0^2 (t)+w_1(t)\\sigma_1^2 (t)\\] Weights \\(w_0\\) and \\(w_1\\) are the probabilities of the two classes separated by a threshold \\(t\\), and \\(\\sigma_0^2\\) and \\(\\sigma_1^2\\) are variance of these two classes. The class probability \\(w_{\\{0,1\\}}(t)\\) is computed from the \\(L\\) bins of the histogram: \\[w_0(t) = \\sum\\limits_{i=0}^{t-1}p(i)\\] \\[w_1(t) = \\sum\\limits_{i=t}^{L-1}p(i)\\] For two classes, minimized the intra-class variance is equivalent to maximizing inter-class variance: \\[\\sigma_b^2(t) = \\sigma^2 -\\sigma_w^2(t) = w_0(t)(\\mu_0-\\mu_T)^2 + w_1(t)(\\mu_1-\\mu_T)^2 = w_0(t)w_1(t)[\\mu_0(t)-\\mu_1(t)]^2\\] which is expressed in terms of class probabilities \\(w\\) and class means \\(\\mu\\) where the class means \\(\\mu_0(t)\\), \\(\\mu_1(t), \\mu_T\\) are: \\[\\mu_0(t) = \\frac{\\sum\\limits_{i=0}^{t-1}ip(i)}{w_0(t)}\\] \\[\\mu_1(t) = \\frac{\\sum\\limits_{i=t}^{L-1}ip(i)}{w_1(t)}\\] \\[\\mu_T = \\sum\\limits_{i=0}^{L-1}ip(i)\\]\n\nAlgorithm\n\nCompute histogram and probabilites of each intensity level\nSet up initial w_i(0) and u_i(0)\nStep through all possible thresholds \\(t=1,...,\\text{maximum intensity}\\)\nUpdate \\(w_i\\) and \\(\\mu_i\\)\nCompute \\(\\sigma_b^2(t)\\)\nDesired threshold corresponds to maximum \\(\\sigma_b^2(t)\\)\n\n\n\nCode\ndef otsu(img):\n  hist = imgToHist(img)\n  inter_class_variances = []\n  for i in range(256):\n    w0 = sum(hist[0:i])\n    w1 = sum(hist[i:])\n    u0 = sum([x*hist[x]/w0 for x in range(0,i)])\n    u1 = sum([x*hist[x]/w1 for x in range(i,256)])\n    sigma0 = sum([((x-u0)**2)*hist[x] for x in range(0,i)])\n    sigma1 = sum([((x-u1)**2)*hist[x] for x in range(i,256)])\n    sigmaw = w0*sigma0 + w1*sigma1\n    sigmab=w0*w1*(u0-u1)**2\n    inter_class_variances.append(sigmab)\n  # maximizing inter-class variance\n  threshold = inter_class_variances.index(max(inter_class_variances))\n  binarized_image = np.zeros_like(img)\n  for x_pixel in range(img.shape[0]):\n          for y_pixel in range(img.shape[1]):\n              pixel_value = int(img[x_pixel, y_pixel])\n              if pixel_value &gt; threshold:\n                binarized_image[x_pixel, y_pixel] = 255\n              else:\n                binarized_image[x_pixel, y_pixel] = 0\n  return threshold, binarized_image\n\n\n\n\nCode\ndef showBinarizedImg(source_img):\n    fig, axes = plt.subplots(1, 2, figsize=(6, 4))\n    # source image\n    axes[0].imshow(source_img, cmap='gray')\n    axes[0].set_title(r'Source Image')\n    axes[0].axis('off')\n    \n    # binarized image\n    threshold, binarized_img = otsu(source_img)\n    axes[1].imshow(binarized_img, cmap='gray')\n    axes[1].set_title(r\"Binarized Image\")\n    axes[1].axis('off')\n\n    # figure title based on threshold with LaTeX formatting\n    fig.suptitle(fr\"Otsu's Threshold: ${threshold}$\", fontsize=12)\n\n    plt.tight_layout()\n    plt.show()\n\n\n\n\nCode\nshowBinarizedImg(bookpage_1)\nshowBinarizedImg(bookpage_2)\nshowBinarizedImg(panther)\nshowBinarizedImg(tom)"
  },
  {
    "objectID": "posts/otsu_thresholding/otsu_thresholding.html#adding-gaussian-noise-and-applying-otsus-algorithm",
    "href": "posts/otsu_thresholding/otsu_thresholding.html#adding-gaussian-noise-and-applying-otsus-algorithm",
    "title": "Otsu’s Threshold Algorithm",
    "section": "Adding Gaussian Noise and Applying Otsu’s Algorithm",
    "text": "Adding Gaussian Noise and Applying Otsu’s Algorithm\nBy adding noise to an image, we can simulate real-world scenarios where images are often corrupted by various noise sources (e.g., sensor noise, transmission errors). This allows us to evaluate how well Otsu’s method performs under different noise conditions and its robustness to noise.\n\n\nCode\ndef addGaussianNoise(img, variance):\n  mean = 0.0\n  std = np.sqrt(variance)\n  noisy_img = img + np.random.normal(mean, std, img.shape)\n  noisy_img_clipped = np.clip(noisy_img, 0, 255 )\n  return noisy_img_clipped\n\n\n\n\nCode\ndef showBinarizedImgWithNoise(source_img, variance):\n    threshold, binarized_img = otsu(source_img)\n    noisy_source_img = addGaussianNoise(source_img, variance)\n    noisy_threshold, binarized_noisy_img = otsu(noisy_source_img)\n    \n    fig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n    # Source and Binarized Image Titles (without noise)\n    source_title = r\"Source Image\"\n    binary_title = fr\"Binarized Image (Threshold: ${threshold}$)\"\n\n    # Noisy Source and Binarized Image Titles (with noise)\n    noisy_source_title = fr\"Source Image with Noise ($\\sigma^2={variance}$)\"\n    noisy_binary_title = fr\"Binarized Image (Threshold: ${noisy_threshold}$)\"\n\n    # Source image\n    axes[0].imshow(source_img, cmap='gray')\n    axes[0].set_title(source_title)\n    axes[0].axis('off')\n\n    # Binarized image\n    axes[1].imshow(binarized_img, cmap='gray')\n    axes[1].set_title(binary_title)\n    axes[1].axis('off')\n\n    # Source image with noise\n    axes[2].imshow(noisy_source_img, cmap='gray')\n    axes[2].set_title(noisy_source_title)\n    axes[2].axis('off')\n\n    # Binarized image with noise\n    axes[3].imshow(binarized_noisy_img, cmap='gray')\n    axes[3].set_title(noisy_binary_title)\n    axes[3].axis('off')\n\n    plt.tight_layout()\n    plt.show()\n\n\n\n\nCode\nvar = 1000\nshowBinarizedImgWithNoise(bookpage_1, var)\nshowBinarizedImgWithNoise(bookpage_2, var)\nshowBinarizedImgWithNoise(panther, var)\nshowBinarizedImgWithNoise(tom, var)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe threshold value obtained from Otsu’s method may vary significantly depending on the noise level. Higher noise levels can lead to less accurate thresholding.\nThe quality of the binarized image can degrade with increasing noise. Noisy pixels can be incorrectly classified as foreground or background, leading to a loss of detail and accuracy.\nBy analyzing the results under different noise levels, we can assess the robustness of Otsu’s method. Some variations of Otsu’s method, such as adaptive thresholding, may be more resilient to noise.\nWe might consider pre-processing techniques like noise reduction filters to improve the input image quality before applying Otsu’s method."
  },
  {
    "objectID": "posts/otsu_thresholding/otsu_thresholding.html#references",
    "href": "posts/otsu_thresholding/otsu_thresholding.html#references",
    "title": "Otsu’s Threshold Algorithm",
    "section": "References",
    "text": "References\nWikipedia Contributors, “Otsu’s method,” Wikipedia, Aug. 16, 2020. https://en.wikipedia.org/wiki/Otsu%27s_method"
  },
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/idna-3.10.dist-info/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/idna-3.10.dist-info/LICENSE.html",
    "title": "<strong>Devansh</strong> Lodha",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2013-2024, Kim Davies and contributors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/numpy/random/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/numpy/random/LICENSE.html",
    "title": "NCSA Open Source License",
    "section": "",
    "text": "This software is dual-licensed under the The University of Illinois/NCSA Open Source License (NCSA) and The 3-Clause BSD License\n\nNCSA Open Source License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nDeveloped by: Kevin Sheppard (kevin.sheppard@economics.ox.ac.uk, kevin.k.sheppard@gmail.com) http://www.kevinsheppard.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of Kevin Sheppard, nor the names of any contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n\n3-Clause BSD License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nComponents\nMany parts of this module have been derived from original sources, often the algorithm’s designer. Component licenses are located with the component code."
  },
  {
    "objectID": "venv_blog/lib/python3.12/site-packages/httpcore-1.0.7.dist-info/licenses/LICENSE.html",
    "href": "venv_blog/lib/python3.12/site-packages/httpcore-1.0.7.dist-info/licenses/LICENSE.html",
    "title": "<strong>Devansh</strong> Lodha",
    "section": "",
    "text": "Copyright © 2020, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  }
]